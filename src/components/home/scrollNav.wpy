
<template>
    <view class="bg-white container">
        <view class="bg-white container weui-flex flex-c {{isfixed?'fixed':'pr'}}">
            <scroll-view scroll-x class="nav" scroll-with-animation scroll-left="{{scrollLeft}}">
                <repeat for="{{model}}" key="index" index="index" item="item">
                    <view class="cu-item {{index == TabCur?'cur':''}}" style="color:{{index == TabCur?theme:''}}" @tap="tabSelect({{item.id}})" data-id="{{index}}">
                        {{item.name}}
                    </view>
                </repeat>
            </scroll-view>
            <view @tap="screen" class="screen weui-flex flex-c flex-jc">{{screens[screenKey].name}}<text class="cuIcon-{{hasScreen?'triangleupfill':'triangledownfill'}} "></text></view>
            <view hidden="{{!hasScreen}}" class="screen-box bg-white">
                <repeat for="{{screens}}" key="index" index="index" item="item">
                   <view @tap="che_screen({{item.id}},{{item.name}})">{{item.content}}</view> 
                </repeat>
                
            </view>
        </view>
    </view>
</template>

<script>
    import wepy from "wepy";
    export default class Dialog extends wepy.component {
        props = ['model', 'isfixed']
        data = {
            TabCur: 0,
            scrollLeft: 0,
            theme: wepy.$instance.globalData.themeColor,
            hasScreen: false,
            screens:[{
                id:0,
                name:'默认',
                content:'默认排序'
            },{
                id:1,
                name:'时间',
                content:'开始时间由近到远'
            },{
                id:2,
                name:'人气',
                content:'人气从高到低'
            }],
            screenKey: '0'
        };
        methods = {
            tabSelect(id, e) {
                if(this.TabCur == e.currentTarget.dataset.id) return false
                this.TabCur = e.currentTarget.dataset.id;
                this.scrollLeft = (e.currentTarget.dataset.id - 1) * 60
                this.$emit('ret', id, this.screenKey)
            },
            screen() {
                this.hasScreen = !this.hasScreen
            },
            che_screen(screenKey) {
                if(this.screenKey == screenKey) return false
                this.hasScreen = false
                this.screenKey = screenKey
                this.$emit('ret', this.model[this.TabCur].id, screenKey)
            }
        };
    }
</script>


<style lang="less" scoped>
    .fixed {
        position: fixed;
        left: 0;
        top: 110rpx;
        
    }
    .pr{
        position: relative;
    }
    .container {
        border-bottom: 1px solid #eee;
        height: 90rpx;
        z-index: 9999;
    }
    .nav {
        width: 630rpx;
        box-sizing: border-box;
    }
    .screen {
        height: 100%;
        width: 120rpx;
        box-sizing: border-box;
        border-left: 1px solid #eee;
    }
    .screen-box {
        position: absolute;
        left: 0;
        top: 92rpx;
        width: 100%;
        transition: all 0.36s;
        view {
            height: 70rpx;
            line-height: 70rpx;
            box-sizing: border-box;
            border-bottom: 1px solid #eee;
            padding-left: 30rpx;
            &:last-child {
                border: 0;
            }
        }
    }
</style>